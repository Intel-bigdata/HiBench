USE etl_sales_db;
DROP VIEW promv;
CREATE view promv as
SELECT  /*+ MAPJOIN(d1), MAPJOIN(d2) */
	prom_promotion_id
       ,prom_promotion_name
       ,d1.d_date_sk prom_start_date_sk
       ,d2.d_date_sk prom_end_date_sk
       ,prom_cost
       ,prom_response_target
       ,prom_channel_dmail
       ,prom_channel_email
       ,prom_channel_catalog
       ,prom_channel_tv
       ,prom_channel_radio
       ,prom_channel_press
       ,prom_channel_event
       ,prom_channel_demo
       ,prom_channel_details
       ,prom_purpose
       ,prom_discount_active
FROM    s_promotion sp1
LEFT OUTER JOIN date_dim d1 ON (sp1.prom_start_date = d1.d_date)
LEFT OUTER JOIN date_dim d2 ON (sp1.prom_end_date = d2.d_date);

DROP VIEW promv2;
CREATE VIEW promv2 AS
SELECT /*+STREAMTABLE(promotion)*/*
FROM promotion
LEFT OUTER JOIN promv ON (promv.prom_promotion_id = promotion.p_promo_id);

CREATE TABLE IF NOT EXISTS promotion_update_tmp LIKE promotion;
ALTER TABLE promotion_update_tmp SET TBLPROPERTIES ('serialization.null.format'='');

FROM promv2
INSERT OVERWRITE TABLE promotion
SELECT  p_promo_sk
       ,p_promo_id
       ,p_start_date_sk
       ,p_end_date_sk
       ,p_item_sk
       ,p_cost
       ,p_response_target
       ,p_promo_name
       ,p_channel_dmail
       ,p_channel_email
       ,p_channel_catalog
       ,p_channel_tv
       ,p_channel_radio
       ,p_channel_press
       ,p_channel_event
       ,p_channel_demo
       ,p_channel_details
       ,p_purpose
       ,p_discount_active
WHERE (prom_promotion_id IS NULL)
INSERT OVERWRITE TABLE promotion_update_tmp
SELECT  p_promo_sk
       ,prom_promotion_id p_promo_id
       ,prom_start_date_sk p_start_date_sk
       ,prom_end_date_sk p_end_date_sk
       ,p_item_sk
       ,prom_cost p_cost
       ,prom_response_target p_response_target
       ,prom_promotion_name p_promo_name
       ,prom_channel_dmail p_channel_dmail
       ,prom_channel_email p_channel_email
       ,prom_channel_catalog p_channel_catalog
       ,prom_channel_tv p_channel_tv
       ,prom_channel_radio p_channel_radio
       ,prom_channel_press p_channel_press
       ,prom_channel_event p_channel_event
       ,prom_channel_demo p_channel_demo
       ,prom_channel_details p_channel_details
       ,prom_purpose p_purpose
       ,prom_discount_active p_discount_active
WHERE (prom_promotion_id IS NOT NULL);

set mapred.min.split.size=536870912;

LOAD DATA INPATH 'warehouse/etl_sales_db.db/promotion_update_tmp' INTO TABLE promotion;

DROP TABLE IF EXISTS promotion_update_tmp;
